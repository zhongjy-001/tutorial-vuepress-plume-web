import{_ as t,c as n,a as l,o as i}from"./app-DRdcBtos.js";const a={};function o(p,e){return i(),n("div",null,e[0]||(e[0]=[l('<h2 id="selenium的介绍" tabindex="-1"><a class="header-anchor" href="#selenium的介绍"><span>Selenium的介绍</span></a></h2><h3 id="一、-前言" tabindex="-1"><a class="header-anchor" href="#一、-前言"><span>一、 前言</span></a></h3><blockquote><p>声明以下的例子，只是来作为测试学习，并不作为真正的爬虫</p></blockquote><p>我们在浏览一些网站时，有不少内容是通过 JavaScript动态渲染的，或是AJAX 请求后端加载数据，这其中涉及到了不少加密参数如 token，sign，难以找规律，较为复杂。像前面的百度贴吧的一个评论的回复，百度翻译等，都是经过ajax动态 加载得到。</p><p>为了解决这些问题，我们可以直接模拟浏览器运行，然后爬取数据，这样就可以实现在浏览器中看到内容是怎么样了，不用去分析 JS 的算法，也不用去管 ajax 的接口参数了。</p><p>python 提供了多种模拟器运行库，Selenium、Splash、Pyppetter、Playwright 等，可以方便帮我们爬取，很大程度上可以绕过JavaScript动态渲染，获取数据。</p><h3 id="二、-selenium介绍" tabindex="-1"><a class="header-anchor" href="#二、-selenium介绍"><span>二、 Selenium介绍</span></a></h3><p>官网中文文档：https://www.selenium.dev/zh-cn/documentation/</p><p>其访问比较慢，最好是用 VPN</p><ul><li>优点：</li></ul><p>Selenium 是一个自动化测试工具，历史悠久，功能强大，技术成熟。其优点是能直接在浏览器上操作，利用它可以像人一样完成，输入文本框内容，点击，下拉等操作，它不但能做自动化测试，在爬虫领域也是一把利器，能解决大部分网页反爬问题，Selenium可以根据驱动的代码指令来获取网页内容，甚至是验证码的截屏，或判断网站上的某些动作是否发生。我们这边主要是围绕着爬虫展开。</p><p>2、缺点：</p><ol><li><p>Selenium 运行比较慢，它需要等待浏览器的元素加载完毕，所以耗时。</p></li><li><p>驱动的适配，浏览器版本不同，浏览器类型不同，得使用不同的驱动器。</p></li><li><p>像一些安全性比较高，比较大型的网站是能检测出是否使用了Selenium来爬取网站</p></li></ol><h3 id="三、-selenium环境搭建" tabindex="-1"><a class="header-anchor" href="#三、-selenium环境搭建"><span>三、 Selenium环境搭建</span></a></h3><blockquote><p>我本机是 windows 11，浏览器使用 Edge 来进行测试</p></blockquote>',15)]))}const s=t(a,[["render",o],["__file","how-detail.html.vue"]]),m=JSON.parse('{"path":"/blog/python/selenium/how-detail.html","title":"Python使用Selenium（超详细教程）","lang":"zh-CN","frontmatter":{"title":"Python使用Selenium（超详细教程）","tags":["python","selenium"],"createTime":"2024/10/21 14:42:33","permalink":"/blog/python/selenium/how-detail.html","draft":true,"description":"Selenium的介绍 一、 前言 声明以下的例子，只是来作为测试学习，并不作为真正的爬虫 我们在浏览一些网站时，有不少内容是通过 JavaScript动态渲染的，或是AJAX 请求后端加载数据，这其中涉及到了不少加密参数如 token，sign，难以找规律，较为复杂。像前面的百度贴吧的一个评论的回复，百度翻译等，都是经过ajax动态 加载得到。 为了...","head":[["meta",{"property":"og:url","content":"https://www.igoblogs.com/blog/python/selenium/how-detail.html"}],["meta",{"property":"og:site_name","content":"一起来编程"}],["meta",{"property":"og:title","content":"Python使用Selenium（超详细教程）"}],["meta",{"property":"og:description","content":"Selenium的介绍 一、 前言 声明以下的例子，只是来作为测试学习，并不作为真正的爬虫 我们在浏览一些网站时，有不少内容是通过 JavaScript动态渲染的，或是AJAX 请求后端加载数据，这其中涉及到了不少加密参数如 token，sign，难以找规律，较为复杂。像前面的百度贴吧的一个评论的回复，百度翻译等，都是经过ajax动态 加载得到。 为了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"selenium"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python使用Selenium（超详细教程）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Selenium的介绍","slug":"selenium的介绍","link":"#selenium的介绍","children":[{"level":3,"title":"一、 前言","slug":"一、-前言","link":"#一、-前言","children":[]},{"level":3,"title":"二、 Selenium介绍","slug":"二、-selenium介绍","link":"#二、-selenium介绍","children":[]},{"level":3,"title":"三、 Selenium环境搭建","slug":"三、-selenium环境搭建","link":"#三、-selenium环境搭建","children":[]}]}],"readingTime":{"minutes":1.84,"words":552},"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"autoDesc":true,"filePathRelative":"1.python/20241123-how-selenium-detail.md","categoryList":[{"id":"6201ab","sort":1,"name":"python"}]}');export{s as comp,m as data};
